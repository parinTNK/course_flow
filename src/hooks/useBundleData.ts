import { useEffect, useState } from "react";
import { Bundle } from "@/types/bundle";

export function useBundleData(bundleId: string) {
  const [bundle, setBundle] = useState<Bundle | null>(null);
  const [bundleCourses, setBundleCourses] = useState<any[]>([]);
  const [otherBundles, setOtherBundles] = useState<Bundle[]>([]);
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    if (!bundleId) return;

    const fetchData = async () => {
      setLoading(true);
      try {
        console.log('üîç Fetching bundle data for ID:', bundleId);
        
        // ‡πÅ‡∏Å‡πâ API path ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á)
        const response = await fetch(`/api/bundles/${bundleId}`);
        
        if (!response.ok) {
          console.error('‚ùå API response not ok:', response.status);
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ Bundle API response:', result);
        
        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: API ‡∏™‡πà‡∏á direct object ‡πÑ‡∏°‡πà‡∏°‡∏µ data wrapper
        if (result && result.id) {
          setBundle(result);
          setBundleCourses(result.courses || []);
          console.log('üìö Courses found:', result.courses?.length || 0);
          console.log('üìã Course details:', result.courses);
        } else if (result.error) {
          console.error('‚ùå API returned error:', result.error);
          throw new Error(result.error);
        } else {
          console.error('‚ùå Unexpected response format:', result);
          throw new Error('Bundle not found');
        }

        // ‡∏î‡∏∂‡∏á bundles ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
        try {
          const otherBundlesResponse = await fetch(`/api/bundles?limit=6`);
          if (otherBundlesResponse.ok) {
            const otherBundlesData = await otherBundlesResponse.json();
            // ‡∏Å‡∏£‡∏≠‡∏á bundle ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏≠‡∏≠‡∏Å
            const filteredBundles = otherBundlesData.bundles?.filter((b: any) => b.id !== bundleId) || [];
            setOtherBundles(filteredBundles.slice(0, 6));
            console.log('üì¶ Other bundles found:', filteredBundles.length);
          }
        } catch (err) {
          console.log('‚ö†Ô∏è Other bundles API not available:', err);
          setOtherBundles([]);
        }
      } catch (err) {
        console.error("üí• Error in useBundleData:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [bundleId]);

  return { bundle, bundleCourses, otherBundles, loading };
}